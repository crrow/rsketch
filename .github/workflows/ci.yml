name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  # Early validation - fast checks that can fail the workflow quickly
  validate:
    name: Early validation
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.rust-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get Rust version from toolchain
        id: rust-version
        run: |
          RUST_VERSION=$(grep 'channel = ' rust-toolchain.toml | cut -d '"' -f 2)
          echo "version=$RUST_VERSION" >> $GITHUB_OUTPUT
          echo "Rust version: $RUST_VERSION"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.rust-version.outputs.version }}
          components: clippy

      - name: Install nightly toolchain for rustfmt
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "validate"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Check Cargo.toml format
        run: cargo check --workspace --all-targets

      - name: Check formatting
        run: cargo +nightly fmt --all -- --check

  # Protobuf validation with Buf
  buf-lint:
    name: Buf Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Buf lint
        run: cd api && buf lint

      - name: Buf format check
        run: cd api && buf format --diff --exit-code

      - name: Buf breaking change detection
        if: github.event_name == 'pull_request'
        run: cd api && buf breaking --against '../.git#branch=${{ github.base_ref }}'

  golangci-lint:
    name: GolangCI Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: examples/goclient

  # Code quality checks (can run in parallel)
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.validate.outputs.rust-version }}
          components: clippy

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "clippy"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features --no-deps -- -D warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "docs"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Generate documentation
        run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

  # Multi-platform testing
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.validate.outputs.rust-version }}

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "test-${{ matrix.os }}"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Run tests
        run: |
          cargo nextest run --workspace --all-features
          cargo test --workspace --all-features --doc

  # Coverage report (Linux only for faster execution)
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ needs.validate.outputs.rust-version }}

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "coverage"
          save-if: ${{ github.ref == 'refs/heads/main' }}

      - name: Generate coverage report
        run: |
          cargo tarpaulin \
            --engine llvm \
            --workspace \
            --all-features \
            --no-dead-code \
            --skip-clean \
            --out xml \
            --output-dir ./coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./coverage/
          if-no-files-found: error
          retention-days: 30

  web:
    name: Build and deploy site and docs
    runs-on: ubuntu-latest
    steps:
      # Setup
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2

      # Install mdbook plugins
      - name: Install mdbook plugins
        run: |
          cargo install --locked mdbook-toc@0.11.2
          cargo install --locked mdbook-linkcheck@0.7.7

      # Install and run oranda (and mdbook)
      # This will write all output to ./public/ (including copying mdbook's output to there)
      - name: Install and run oranda
        run: |
          cargo install oranda --locked --profile=dist
          oranda build

      # Deploy to our gh-pages branch (creating it if it doesn't exist)
      # the "public" dir that oranda made above will become the root dir
      # of this branch.
      #
      # Note that once the gh-pages branch exists, you must
      # go into repo's settings > pages and set "deploy from branch: gh-pages"
      # the other defaults work fine.
      - name: Deploy to Github Pages
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        # ONLY if we're on main (so no PRs or feature branches allowed!)
        # if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/topic/') }}
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          branch: gh-pages
          # Gotta tell the action where to find oranda's output
          folder: public
          token: ${{ secrets.GITHUB_TOKEN }}
          single-commit: true
  # Final validation - all checks must pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [validate, buf-lint, clippy, docs, test, web, golangci-lint]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.validate.result }}" != "success" || \
                "${{ needs.buf-lint.result }}" != "success" || \
                "${{ needs.clippy.result }}" != "success" || \
                "${{ needs.docs.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.mdbook.result }}" != "success" || \
                "${{ needs.golangci-lint.result }}" != "success" ]]; then
            echo "One or more required jobs failed"
            exit 1
          fi
          echo "All required jobs passed successfully"
