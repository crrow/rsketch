# Copyright 2025 Crrow
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from hello.v1 import hello_pb2 as hello_dot_v1_dot_hello__pb2


class HelloServiceStub(object):
    """HelloService provides greeting functionality
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Hello = channel.unary_unary(
                '/hello.v1.HelloService/Hello',
                request_serializer=hello_dot_v1_dot_hello__pb2.HelloRequest.SerializeToString,
                response_deserializer=hello_dot_v1_dot_hello__pb2.HelloResponse.FromString,
                _registered_method=True)


class HelloServiceServicer(object):
    """HelloService provides greeting functionality
    """

    def Hello(self, request, context):
        """Hello greets the caller with a personalized message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HelloServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Hello': grpc.unary_unary_rpc_method_handler(
                    servicer.Hello,
                    request_deserializer=hello_dot_v1_dot_hello__pb2.HelloRequest.FromString,
                    response_serializer=hello_dot_v1_dot_hello__pb2.HelloResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hello.v1.HelloService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hello.v1.HelloService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HelloService(object):
    """HelloService provides greeting functionality
    """

    @staticmethod
    def Hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hello.v1.HelloService/Hello',
            hello_dot_v1_dot_hello__pb2.HelloRequest.SerializeToString,
            hello_dot_v1_dot_hello__pb2.HelloResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
