/*
 * Copyright 2025 Crrow
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: hello/v1/hello.proto

#include "hello/v1/hello.pb.h"
#include "hello/v1/hello.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace hello {
namespace v1 {

static const char* HelloService_method_names[] = {
  "/hello.v1.HelloService/Hello",
};

std::unique_ptr< HelloService::Stub> HelloService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HelloService::Stub> stub(new HelloService::Stub(channel, options));
  return stub;
}

HelloService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Hello_(HelloService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HelloService::Stub::Hello(::grpc::ClientContext* context, const ::hello::v1::HelloRequest& request, ::hello::v1::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::hello::v1::HelloRequest, ::hello::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hello_, context, request, response);
}

void HelloService::Stub::async::Hello(::grpc::ClientContext* context, const ::hello::v1::HelloRequest* request, ::hello::v1::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::hello::v1::HelloRequest, ::hello::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, std::move(f));
}

void HelloService::Stub::async::Hello(::grpc::ClientContext* context, const ::hello::v1::HelloRequest* request, ::hello::v1::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hello::v1::HelloResponse>* HelloService::Stub::PrepareAsyncHelloRaw(::grpc::ClientContext* context, const ::hello::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::hello::v1::HelloResponse, ::hello::v1::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::hello::v1::HelloResponse>* HelloService::Stub::AsyncHelloRaw(::grpc::ClientContext* context, const ::hello::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

HelloService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HelloService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HelloService::Service, ::hello::v1::HelloRequest, ::hello::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](HelloService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hello::v1::HelloRequest* req,
             ::hello::v1::HelloResponse* resp) {
               return service->Hello(ctx, req, resp);
             }, this)));
}

HelloService::Service::~Service() {
}

::grpc::Status HelloService::Service::Hello(::grpc::ServerContext* context, const ::hello::v1::HelloRequest* request, ::hello::v1::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hello
}  // namespace v1

